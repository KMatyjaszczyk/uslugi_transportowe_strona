Projekt zrobię bez użycia MVC / Laravela.
Wykorzystam stronki z poprzedniego semestru - jest tam gotowa nawigacja i formularz.

Najważniejsze featury:
1. Strony synchroniczne (bez fetch API).
2. Funkcjonalności będą dostępne dla **zalogowanych** użytkowników (podział na usera i admina).
3. User będzie mógł zamówić przejazd wykorzystując formularz z poprzedniego semestru, oraz mieć podgląd swoich zamówień **wraz z możliwością edycji** (szczegóły zamówienia, data, status).
4. Admin będzie miał możliwość podglądu wszystkich zamówień w systemie, usuwanie zamówień, zmianę treści oraz zmianę statusu.
5. FIltrowanie zamówień na podstawie nazwy klienta, nazwy miejsca docelowego.


Najważniejsze wymagania techniczne:
1. Odpięcie local storage z poprzednich lab.
2. Utworzenie strony logowania (wraz z ostylowaniem).
3. Obsługa mechanizmu sesji - w sesji będzie informacja o zalogowanym użytkowniku (jego ID).
4. Wyświetlenie belki mówiącej, czy użytkownik jest zalogowany czy nie.
5. Jeżeli użytkownik jest zalogowany to ma możliwość przeglądania i składania zamówień.
6. Jeżeli użytkownik jest adminem ma dostępny panel zarządzania zamówieniami.
7. Zostaną użyte zabezpieczenia przed atakami (SQL Injection, filtry itd).


Obsługa operacji CRUD:
Zostanie stworzone przejrzyste API do obsługi operacji na bazie (kody SQL będą schowane w środku metod, bez żadnych querystringów w parametrach) np. getOrdersByUserId(int userId).
Operacje na bazie:
- sprawdzenie czy użytkownik jest zalogowany
- sprawdzenie czy użytkownik jest adminem (na podstawie ID)
- utworzenie zamówienia
- edycja zamówienia o podanym ID
- usunięcie zamówienia o podanym ID
- wyświetlenie wszystkich zamówień 
- wyświetlenie zamówień o ID konkretnego klienta
- wyświetlenie zamówień o podanej nazwie miejsca lub klienta

Klasy domenowe w projekcie:
1. class User
	id: int
	login: string
	password: string
	email: string
	isAdmin: bool
	creationDate: datetime
2. class Order
	id: int
	clientName: string
	clientEmail: string
	departureDate: datetime
	destination: string
	journeyForm: string
	vehicle: string
	additionalServices: string[]
	creationDate: datetime
	lastUpdateDate: datetime
	
Tabele pomocnicze (na bazie):
1. logged_in_users
	userId: int
	sessionId: int
	lastUpdateDate: datetime

zahaszowne hasła do testów: 
	admin - 'admin': $2y$10$DILK/Xv1qK0LF//Nmio/PeolCz2HhtDDabrHNh8bWmQ.Z7DmtSenW
	j.kowalsky - 'kowalsky123': $2y$10$yIKWz6i/AtaRNewXJiheZ.UEGAIDiOnahYWqMfhnLXatPxS7QuDh6

TODO:
+1. Zrób stronę z formularzem logowania
+2. Utwórz klasy domenowe w PHP
+3. Utwórz bazę danych i tabelki
+4. Skopiuj skrypt do utworzenia bazy
+5. Utwórz klasy repozytorium do wykonywania operacji CRUDowych na obiektach
+6. Napisz repozytoria i je przetestuj.
+7. DODAJ STATUS DO ORDERU...
+8. Dodaj usuwanie orderu po Id, wybieranie orderu po nazwie klienta lub destination
+9. Dodaj do bazy (i metod) w tabeli order userId.
+10. Dodaj do repozytorium orderu metodę biorącą wszystkie ordery po zadanym id usera
+11. Stwórz serwisy odpowiadające na żądania (przynajmniej dla orderu), zacznij od usera
+12. Utwórz klasę UserLoginManager realizującą logowanie i wylogowywanie
+13. Dodaj do strony indexowej sprawdzanie czy użytkownik jest zalogowany
	+13.1. Jeżeli nie jest - przycisk do zalogowania
	+13.2. Jeżeli jest - sprawdź czy jest adminem i wyświetl odpowiednie opcje i przycisk do wylogowania
+14. Przetestuj logowanie dokładnie na jednej stronie
+15. Zaimplementuj logowanie na każdej stronie
	+15.1. Logowanie na stronie Rezerwacja:
		- strona dostępna jedynie dla zwykłego usera, jeżeli jest niezalogowany lub admin 
			-> wrzucenie do indexu z odpowiednim getem
	+15.2. Logowanie na stronie Twoje rezerwacje
	+15.3. Logowanie na stronie Panel zamówień
+16. Zaimplementuj formularz rezerwacyjny:
	+16.1. Przepisz nazwy pól
	+16.2. Dodaj HTMLową walidację
	+16.3. Zaimplementuj procesowanie rezerwacji
		+16.3.1. Filtrowanie danych
		+16.3.2. Dodanie nowej rezerwacji do repo
+17. Zaimplementuj wyświetlanie rezerwacji użytkownika
+18. Zaimplementuj manipulację rezerwacjami użytkownika
	- anulowanie (trzeba sprawdzić czy zamówienie jest anulowane przez odpowiedniego użytkownika)
+19. Zaimplementuj panel zamówień
	+19.1. Wyświetlanie wszystkich zamówień
	+19.2. Zmiana statusów
	+19.3. Usuwanie zamówień
	+19.4. Wyszukiwanie po rezerwującym lub celu podróży
20. PRZETESTUJ RÓŻNE SCENARIUSZE NADUŻYĆ
21. Sprawdź bezpieczeństwo na ataki
